env:
  global:
    - RUST_BACKTRACE=1
    - RUSTFLAGS="-C opt-level=2 -C codegen-units=8"
    - PATH=$PATH:$HOME/.cargo/bin
language: rust
rust:
  - 1.29.1
stages:
  - build
  - tests
  - deploy
jobs:
  include:
    - stage: build
      name: "build real linux"
      before_script:
        - docker pull maidsafe/safe-client-libs-build:0.9.0
      script: make build
      before_cache:
        - mkdir -p ~/.cache/artifacts/linux/real/$TRAVIS_BUILD_NUMBER
        - cp artifacts/** ~/.cache/artifacts/linux/real/$TRAVIS_BUILD_NUMBER
        # Travis will automatically cache the target directory, which we don't need when using a container.
        - rm -rf target
      os: linux
    - stage: build
      name: "build mock linux"
      before_script:
        - docker pull maidsafe/safe-client-libs-build:0.9.0
      script: make build-mock
      before_cache:
        - mkdir -p  ~/.cache/artifacts/linux/mock/$TRAVIS_BUILD_NUMBER
        - cp artifacts/** ~/.cache/artifacts/linux/mock/$TRAVIS_BUILD_NUMBER
        # Travis will automatically cache the target directory, which we don't need when using a container.
        - rm -rf target
    - stage: build
      name: "build real osx"
      script: set -x; scripts/build-real
      before_cache:
        - mkdir -p ~/.cache/artifacts/osx/real/$TRAVIS_BUILD_NUMBER
        - find target/release -maxdepth 1 -type f -exec cp '{}' ~/.cache/artifacts/osx/real/$TRAVIS_BUILD_NUMBER \;
        - curl -sSL https://github.com/maidsafe/QA/raw/master/travis/cargo_install.sh > cargo_install.sh
        - bash cargo_install.sh cargo-prune;
        - cargo prune
      os: osx
    - stage: build
      name: "build mock osx"
      script: set -x; scripts/build-mock
      before_cache:
        - mkdir -p ~/.cache/artifacts/osx/mock/$TRAVIS_BUILD_NUMBER
        - find target/release -maxdepth 1 -type f -exec cp '{}' ~/.cache/artifacts/osx/mock/$TRAVIS_BUILD_NUMBER \;
        - curl -sSL https://github.com/maidsafe/QA/raw/master/travis/cargo_install.sh > cargo_install.sh
        - bash cargo_install.sh cargo-prune;
        - cargo prune
      os: osx

    - stage: tests
      name: "mock tests linux"
      before_script:
        - docker pull maidsafe/safe-client-libs-build:0.9.0
        - rm -rf artifacts && mkdir artifacts
        - find ~/.cache/artifacts/linux/mock/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts \;
      script: make test-artifacts-mock
      os: linux
    - stage: tests
      name: "integration tests linux"
      before_script:
        - docker pull maidsafe/safe-client-libs-build:0.9.0
        - rm -rf artifacts && mkdir artifacts
        - find ~/.cache/artifacts/linux/mock/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts \;
      script: make test-artifacts-integration
      os: linux
    - stage: tests
      name: "binary compatibility tests linux"
      before_script:
        - docker pull maidsafe/safe-client-libs-build:0.9.0
        - rm -rf artifacts && mkdir artifacts
        - find ~/.cache/artifacts/linux/mock/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts \;
        # If there is no previous binary compatibility test suite available, use the current one.
        # This situation should only ever occur on the first time the build runs since expecting the file to exist.
        - set -e;
          if [[ ! -f "~/.cache/master/binary-compatibility-tests" ]]; then
            find artifacts -maxdepth 1 -name 'safe_authenticator-*' ! -name '*.d' -exec cp '{}' ~/.cache/master/binary-compatibility-tests \; ;
          fi;
      script: make SCL_BCT_PATH="/home/travis/.cache/master/binary-compatibility-tests" test-artifacts-binary
      after_success: find artifacts -maxdepth 1 -name 'safe_authenticator-*' ! -name '*.d' -exec cp '{}' ~/.cache/master/binary-compatibility-tests \;
      os: linux
    - stage: tests
      name: "mock/integration tests osx"
      script: set -x; scripts/test-mock && scripts/test-integration
      os: osx
    # Temporarily disable clippy
    # - stage: tests
    #   script: set -x; scripts/clippy-all
    #   if: type = pull_request
    #   os: linux

    - stage: deploy
      install:
        - curl -sSL https://github.com/maidsafe/QA/raw/master/travis/cargo_install.sh > cargo_install.sh
        - bash cargo_install.sh cargo-script 0.2.8
      before_script:
        - mkdir -p artifacts/linux/real/release
        - mkdir -p artifacts/linux/mock/release
        - mkdir -p artifacts/osx/real/release
        - mkdir -p artifacts/osx/mock/release
        - find ~/.cache/artifacts/linux/mock/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts/linux/mock/release \;
        - find ~/.cache/artifacts/linux/real/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts/linux/real/release \;
        - find ~/.cache/artifacts/osx/mock/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts/osx/mock/release \;
        - find ~/.cache/artifacts/osx/real/$TRAVIS_BUILD_NUMBER -exec cp '{}' artifacts/osx/real/release \;
      script: make package-artifacts
      deploy:
        provider: s3
        access_key_id: AKIAIA2TXTG7EV5VIG2Q
        secret_access_key:
          secure: qEDay6TCAy3tBLqLYFOx9OjAdoRl010paK2//teFETfwUfJA/RtNSfkp1yrgx+kZ3FO8cthdDnwR3zjM3pkCL+5mGkQMAgvRY7rcEB5H1VyO4jkZRoB4n/yUu5jB4dHdeeRWTOJxNOOPA0G1Q65LLkJql2JGoJatqE3pBmJm0X8=
        bucket: safe-client-libs
        local-dir: deploy
        acl: public_read
        region: eu-west-2
        skip_cleanup: true
        on:
          branch: docker_on_travis_experimental
          tags: false
      after_deploy: rm -rf deploy
      if: type = push
      os: linux
sudo: false
cache:
  # Double the default timeout.
  timeout: 360
  cargo: true
  directories:
    - "${HOME}/.cache/master"
    - "${HOME}/.cache/artifacts"
before_script:
  - scripts/version-check
after_script:
  - if [[ $TRAVIS_EVENT_TYPE = pull_request && -n $(git diff --shortstat 2> /dev/null | tail -n1) ]]; then
      echo "Working tree is dirty after building.  Probably Cargo.lock should be updated.";
      git status;
      travis_terminate 1;
    fi

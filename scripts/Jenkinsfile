properties([
    parameters([
        string(name: "ARTIFACTS_BUCKET", defaultValue: "safe-jenkins-build-artifacts"),
        string(name: "CACHE_BRANCH", defaultValue: "master"),
        string(name: "DEPLOY_BRANCH", defaultValue: "master"),
        string(name: "PUBLISH_BRANCH", defaultValue: "master"),
        string(name: "DEPLOY_BUCKET", defaultValue: "safe-client-libs")
    ])
])

stage("build & test") {
    parallel mock_linux: {
        node("safe_client_libs") {
            checkout(scm)
            runTests("mock")
            stripBuildArtifacts()
            packageBuildArtifacts("mock", "x86_64-unknown-linux-gnu")
            uploadBuildArtifacts()
        }
    },
    mock_windows: {
        node("windows") {
            checkout(scm)
            retrieveCache()
            runTests("mock")
            stripBuildArtifacts()
            packageBuildArtifacts("mock", "x86_64-pc-windows-gnu")
            uploadBuildArtifacts()
        }
    },
    mock_osx: {
        node("osx") {
            checkout(scm)
            runTests("mock")
            stripBuildArtifacts()
            packageBuildArtifacts("mock", "x86_64-apple-darwin")
            uploadBuildArtifacts()
        }
    },
    mock_ios_aarch64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-mock-aarch64")
            packageBuildArtifacts("mock", "aarch64-apple-ios")
            uploadBuildArtifacts()
        }
    },
    mock_ios_x86_64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-mock-x86_64")
            packageBuildArtifacts("mock", "x86_64-apple-ios")
            uploadBuildArtifacts()
        }
    },
    mock_android_armv7: {
        node("safe_client_libs") {
            checkout(scm)
            sh("make build-android-mock-armv7")
            packageBuildArtifacts("mock", "armv7-linux-androideabi")
            uploadBuildArtifacts()
        }
    },
    mock_android_x86_64: {
        node("safe_client_libs") {
            checkout(scm)
            sh("make build-android-mock-x86_64")
            packageBuildArtifacts("mock", "x86_64-linux-android")
            uploadBuildArtifacts()
        }
    },
    real_linux: {
        node("safe_client_libs") {
            checkout(scm)
            sh("make build")
            stripBuildArtifacts()
            packageBuildArtifacts("real", "x86_64-unknown-linux-gnu")
            uploadBuildArtifacts()
        }
    },
    real_windows: {
        node("windows") {
            checkout(scm)
            sh("make build")
            stripBuildArtifacts()
            packageBuildArtifacts("real", "x86_64-pc-windows-gnu")
            uploadBuildArtifacts()
        }
    },
    real_macos: {
        node("osx") {
            checkout(scm)
            sh("make build")
            stripBuildArtifacts()
            packageBuildArtifacts("real", "x86_64-apple-darwin")
            uploadBuildArtifacts()
        }
    },
    real_ios_aarch64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-aarch64")
            packageBuildArtifacts("real", "aarch64-apple-ios")
            uploadBuildArtifacts()
        }
    },
    real_ios_x86_64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-x86_64")
            packageBuildArtifacts("real", "x86_64-apple-ios")
            uploadBuildArtifacts()
        }
    },
    real_android_armv7: {
        node("safe_client_libs") {
            checkout(scm)
            sh("make build-android-armv7")
            packageBuildArtifacts("real", "armv7-linux-androideabi")
            uploadBuildArtifacts()
        }
    },
    real_android_x86_64: {
        node("safe_client_libs") {
            checkout(scm)
            sh("make build-android-x86_64")
            packageBuildArtifacts("real", "x86_64-linux-android")
            uploadBuildArtifacts()
        }
    },
    integration_tests: {
        node("safe_client_libs") {
            checkout(scm)
            runTests("integration")
        }
    },
    clippy_and_rustfmt: {
        node("safe_client_libs") {
            checkout(scm)
            sh("make clippy")
            sh("make rustfmt")
        }
    }
}

stage("build universal iOS lib") {
    node("osx") {
        checkout(scm)
        def branch = env.CHANGE_ID?.trim() ?: env.BRANCH_NAME
        withEnv(["SCL_BUILD_BRANCH=${branch}",
                 "SCL_BUILD_NUMBER=${env.BUILD_NUMBER}"]) {
            sh("make universal-ios-lib")
            sh("make package-universal-ios-lib")
            uploadBuildArtifacts()
        }
    }
}

stage("deployment") {
    parallel deploy_artifacts: {
        node("safe_client_libs") {
            if (env.BRANCH_NAME == "${params.DEPLOY_BRANCH}") {
                checkout(scm)
                sh("git fetch --tags --force")
                retrieveBuildArtifacts()
                if (isVersionChangeCommit()) {
                    def version = getVersion()
                    packageDeployArtifacts(true)
                    createTag(version)
                    createGitHubRelease(version)
                    uploadDeployArtifacts("mock")
                } else {
                    packageDeployArtifacts(false)
                    uploadDeployArtifacts("mock")
                    uploadDeployArtifacts("real")
                }
            } else {
                echo("${env.BRANCH_NAME} does not match the deployment branch. Nothing to do.")
            }
        }
    },
    publish_safe_core_crate: {
        node("safe_client_libs") {
            if (env.BRANCH_NAME == "${params.PUBLISH_BRANCH}") {
                checkout(scm)
                publishCrate("safe_core")
            } else {
                echo("${env.BRANCH_NAME} does not match the publish branch. Nothing to do.")
            }
        }
    },
    publish_safe_app_crate: {
        node("safe_client_libs") {
            if (env.BRANCH_NAME == "${params.PUBLISH_BRANCH}") {
                checkout(scm)
                publishCrate("safe_app")
            } else {
                echo("${env.BRANCH_NAME} does not match the publish branch. Nothing to do.")
            }
        }
    },
    publish_safe_auth_crate: {
        node("safe_client_libs") {
            if (env.BRANCH_NAME == "${params.PUBLISH_BRANCH}") {
                checkout(scm)
                publishCrate("safe_auth")
            } else {
                echo("${env.BRANCH_NAME} does not match the publish branch. Nothing to do.")
            }
        }
    }
    if (env.BRANCH_NAME == "${params.DEPLOY_BRANCH}") {
        build(job: "../rust_cache_build-safe_client_libs-windows", wait: false)
        build(job: "../docker_build-safe_client_libs_build_container", wait: false)
    }
}

def retrieveCache() {
    if (!fileExists("target")) {
        sh("SCL_BUILD_BRANCH=${params.CACHE_BRANCH} make retrieve-cache")
    }
}

def isVersionChangeCommit() {
    def shortCommitHash = sh(
        returnStdout: true,
        script: "git log -n 1 --no-merges --pretty=format:'%h'").trim()
    def message = sh(
        returnStdout: true,
        script: "git log --format=%B -n 1 ${shortCommitHash}").trim()
    return message.startsWith("Version change")
}

def packageBuildArtifacts(mode, target) {
    def isMock = mode == "mock" ? "true" : "false"
    def branch = env.CHANGE_ID?.trim() ?: env.BRANCH_NAME
    withEnv(["SCL_BUILD_NUMBER=${env.BUILD_NUMBER}",
             "SCL_BUILD_BRANCH=${branch}",
             "SCL_BUILD_TARGET=${target}",
             "SCL_BUILD_MOCK=${isMock}"]) {
        sh("make package-build-artifacts")
    }
}

def retrieveBuildArtifacts() {
    def branch = env.CHANGE_ID?.trim() ?: env.BRANCH_NAME
    withEnv(["SCL_BUILD_BRANCH=${branch}",
             "SCL_BUILD_NUMBER=${env.BUILD_NUMBER}"]) {
        sh("make retrieve-all-build-artifacts")
    }
}

def packageDeployArtifacts(isVersionChangeCommit) {
    if (isVersionChangeCommit) {
        sh("make package-versioned-deploy-artifacts")
    } else {
        sh("make package-commit_hash-deploy-artifacts")
    }
}

def stripBuildArtifacts() {
    sh("make strip-artifacts")
}

def uploadBuildArtifacts() {
    withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
        def artifacts = sh(returnStdout: true, script: "ls -1 artifacts").trim().split("\\r?\\n")
        for (artifact in artifacts) {
            s3Upload(
                bucket: "${params.ARTIFACTS_BUCKET}",
                file: artifact,
                workingDir: "${env.WORKSPACE}/artifacts",
                acl: "PublicRead")
        }
    }
}

def getVersion() {
    // For now we"re just taking the version from either safe auth or safe app.
    // We may change this eventually to deploy each component separately, or possibly
    // even refactor into separate repos.
    return sh(
        returnStdout: true,
        script: "grep '^version' < safe_app/Cargo.toml | head -n 1 | awk '{ print \$3 }' | sed 's/\"//g'").trim()
}

def uploadDeployArtifacts(type) {
    withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
        def artifacts = sh(
            returnStdout: true, script: "ls -1 deploy/${type}").trim().split("\\r?\\n")
        for (artifact in artifacts) {
            s3Upload(
                bucket: "${params.DEPLOY_BUCKET}",
                file: artifact,
                workingDir: "${env.WORKSPACE}/deploy/${type}",
                acl: "PublicRead")
        }
    }
}

def createTag(version) {
    withCredentials(
        [usernamePassword(
            credentialsId: "github_maidsafe_qa_user_credentials",
            usernameVariable: "GIT_USER",
            passwordVariable: "GIT_PASSWORD")]) {
        sh("git config --global user.name \$GIT_USER")
        sh("git config --global user.email qa@maidsafe.net")
        sh("git config credential.username \$GIT_USER")
        sh("git config credential.helper '!f() { echo password=\$GIT_PASSWORD; }; f'")
        sh("git tag -a ${version} -m 'Creating tag for ${version}'")
        sh("GIT_ASKPASS=true git push origin --tags")
    }
}

def createGitHubRelease(version) {
    withCredentials(
        [usernamePassword(
            credentialsId: "github_maidsafe_token_credentials",
            usernameVariable: "GITHUB_USER",
            passwordVariable: "GITHUB_TOKEN")]) {
        sh("make deploy-github-release")
    }
}

def publishCrate(name) {
    withCredentials(
        [string(
            credentialsId: "crates_io_token", variable: "CRATES_IO_TOKEN")]) {
        sh("make publish-${name}")
    }
}

def uploadBinaryCompatibilityTests() {
    sh("mkdir -p ${env.WORKSPACE}/bct/${env.BUILD_NUMBER}")
    def testExecutable = sh(
        returnStdout: true,
        script: $/eval "find target/release -maxdepth 1 -mindepth 1 -name 'tests-*' ! -name '*.d'" /$).trim()
    sh("cp ${testExecutable} ${env.WORKSPACE}/bct/${env.BUILD_NUMBER}/tests")
    sh("rm -rf target/release")
    withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
        s3Upload(
            bucket: "${params.ARTIFACTS_BUCKET}",
            file: "bct/${env.BUILD_NUMBER}/tests",
            path: "bct/${env.BUILD_NUMBER}/tests",
            workingDir: "${env.WORKSPACE}",
            acl: "PublicRead")
    }
}

def runBinaryCompatibilityTests() {
    def buildNumber = getLastSuccessfulBuildNumber(currentBuild)
    if (buildNumber != -1) {
        echo("Running binary compatibility tests: build ${buildNumber} being used as previous set")
        def bctTestPath = "${env.WORKSPACE}/bct-${buildNumber}"
        withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
            s3Download(
                file: "${bctTestPath}",
                bucket: "${params.ARTIFACTS_BUCKET}",
                path: "bct/${buildNumber}/tests",
                force: true)
        }
        runTests("binary", bctTestPath)
    } else {
        echo("Not running binary compatibility tests:  no previously successful builds found")
    }
}

def runTests(mode, bctTestPath="") {
    if (mode == "mock") {
        sh("make tests")
    } else if (mode == "mock-file") {
        sh("make test-with-mock-vault-file")
    } else if (mode == "binary") {
        withEnv(["SCL_BCT_PATH=${bctTestPath}"]) {
            sh("make test-artifacts-binary")
        }
    } else {
        sh("make tests-integration")
    }
}

def getLastSuccessfulBuildNumber(build) {
    if (build == null) {
        return -1
    }
    if (build.result == "SUCCESS") {
        return build.number as Integer
    }
    return getLastSuccessfulBuildNumber(build.getPreviousBuild())
}

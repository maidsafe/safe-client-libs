#!/bin/bash

# Wrapper for running the build in the context of a container.
#
# The reason why this exists is really just to ensure that the container
# runs with a unique name. This is to support running more than one build
# on a single machine, which could happen when we're using Jenkins. The
# container needs to have a known name so we can extract the artifacts
# from it after the build has finished.
#
# It's in a script rather than the Makefile because there are several things
# here that are quite awkward to do in a Makefile, like declaring new
# variables at run time.

set -e -x

build_mode=$1
if [[ -z "$build_mode" ]]; then
    echo "This script must be invoked with a build mode argument."
    echo "Valid values are 'mock' and 'real'."
    exit 1
fi

safe_app_version=$2
if [[ -z "$safe_app_version" ]]; then
    echo "The safe app version number must be supplied as a 2nd argument to this script."
    echo "Pass it in by reading it from Cargo.toml."
    exit 1
fi

user_id=$(id -u)
group_id=$(id -g)

if [[ -z "$BUILD_NUMBER" ]]; then
    uid=$(uuidgen | sed 's/-//g')
    container_name="safe_app_build_$build_mode$uid"
else
    # BUILD_NUMBER will be defined in the context of a Jenkins build.
    container_name="safe_app_build_$build_mode$BUILD_NUMBER"
fi

rm -rf target
docker run --name "$container_name" \
    -v "${PWD}":/usr/src/safe_client_libs:Z \
    -u "$user_id":"$group_id" \
    -e CARGO_TARGET_DIR=/target \
    maidsafe/safe-client-libs-build:"$safe_app_version" \
    scripts/build-"$build_mode"
docker cp "$container_name":/target .
docker rm -f "$container_name"

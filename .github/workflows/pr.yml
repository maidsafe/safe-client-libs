name: PR

on: [pull_request]

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"

jobs:
  clippy:
    name: Rustfmt-Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - shell: bash
        run: ./scripts/clippy-all

  # Run `cargo build` in the root directory to test all build scripts.
  build-script:
    name: Build Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build

  build-ios:
    runs-on: macOS-latest
    strategy:
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_authenticator/Cargo.toml
            --target=${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_app/Cargo.toml
            --target=${{ matrix.target }}
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/${{ matrix.target }}/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      # Upload for build-ios-universal
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-prod
          path: artifacts
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_authenticator/Cargo.toml
            --features=mock-network --target=${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_app/Cargo.toml
            --features=mock-network --target=${{ matrix.target }}
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/${{ matrix.target }}/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      # Upload for build-ios-universal
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-dev
          path: artifacts

  # Use a single job for each type to build all targets.
  build-ios-universal:
    name: Build iOS Universal
    runs-on: macos-latest
    needs: build-ios
    strategy:
      matrix:
        type: [prod, dev]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-ios-${{ matrix.type }}
          path: artifacts/${{ matrix.type }}/x86_64-apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-aarch64-apple-ios-${{ matrix.type }}
          path: artifacts/${{ matrix.type }}/aarch64-apple-ios/release
      - shell: bash
        run: make universal-ios-lib-${{ matrix.type }}

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [armv7-linux-androideabi, x86_64-linux-android]
        type: [prod, dev]
    env:
      SAFE_CLIENT_LIBS_CONTAINER_TARGET: ${{ matrix.target }}
      SAFE_CLIENT_LIBS_CONTAINER_TYPE: ${{ matrix.type }}
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        run: make build-android

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: ./scripts/test-mock

name: PR

on: [pull_request]

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"

jobs:
  clippy:
    name: Rustfmt-Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      # Check if the code is formatted correctly.
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # Run Clippy.
      - shell: bash
        run: ./scripts/clippy-all

  # Run `cargo build` in the root directory to test all build scripts.
  build-script:
    name: Build Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # Test build scripts.
      - uses: actions-rs/cargo@v1
        with:
          command: build

  build-ios:
    name: Build iOS
    runs-on: macOS-latest
    strategy:
      matrix:
        component: [safe_app, safe_authenticator]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: aarch64-apple-ios
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-apple-ios
      
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      # Install cargo-lipo for universal iOS libs.
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-lipo
      
      # Build prod libraries.
      - name: Build universal lib - prod
        shell: bash
        run: cargo lipo --release --manifest-path=${{ matrix.component}}/Cargo.toml
      # Upload prod libs.
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.component }}-apple-ios-prod
          path: target/universal/release/lib${{ matrix.component }}.a
      # Build dev libs.
      - name: Build universal lib - dev
        shell: bash
        run: cargo lipo --release --manifest-path=${{ matrix.component}}/Cargo.toml --features=mock-network
      # Upload dev libs.
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.component }}-apple-ios-dev
          path: target/universal/release/lib${{ matrix.component }}.a

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [armv7-linux-androideabi, x86_64-linux-android]
        type: [prod, dev]
    env:
      SAFE_CLIENT_LIBS_CONTAINER_TARGET: ${{ matrix.target }}
      SAFE_CLIENT_LIBS_CONTAINER_TYPE: ${{ matrix.type }}
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        run: make build-android

  # Run test suite.
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # Run tests.
      - shell: bash
        run: ./scripts/test-mock

  # Test publish using --dry-run.
  # Only safe_core, as auth and app will fail if core was version-updated.
  test-publish:
    name: Test Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_core/Cargo.toml --dry-run

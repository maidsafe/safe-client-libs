name: Master

on:
  push:
    branches:
      - master

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Build prod libraries.
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;

      - uses: actions/upload-artifact@master
        with:
          name: sn_client-${{ matrix.target }}-prod
          path: artifacts

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, build-android, build-ios]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

    steps:
      # Checkout and get all the artifacts built in the previous jobs.
      - uses: actions/checkout@v2
      
      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-script
        run: cargo install cargo-script

      - uses: actions/download-artifact@master
        with:
          name: sn_client-x86_64-pc-windows-gnu-prod
          path: artifacts/prod/x86_64-pc-windows-gnu/release

      - uses: actions/download-artifact@master
        with:
          name: sn_client-x86_64-pc-windows-gnu-dev
          path: artifacts/dev/x86_64-pc-windows-gnu/release

      - uses: actions/download-artifact@master
        with:
          name: sn_client-x86_64-unknown-linux-gnu-prod
          path: artifacts/prod/x86_64-unknown-linux-gnu/release

      - uses: actions/download-artifact@master
        with:
          name: sn_client-x86_64-unknown-linux-gnu-dev
          path: artifacts/dev/x86_64-unknown-linux-gnu/release

      - uses: actions/download-artifact@master
        with:
          name: sn_client-x86_64-apple-darwin-prod
          path: artifacts/prod/x86_64-apple-darwin/release

      - uses: actions/download-artifact@master
        with:
          name: sn_client-x86_64-apple-darwin-dev
          path: artifacts/dev/x86_64-apple-darwin/release
      
      
      # Get information for the release.
      - shell: bash
        id: versioning
        run: |
          client_version=$(grep "^version" < Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=client_version::$client_version"

      # Create `deploy` directory and put the artifacts into tar/zip archives for deployment with the release.
      - shell: bash
        run: make package-commit_hash-deploy-artifacts
        if: "!startsWith(env.COMMIT_MESSAGE, 'Version change')"
      - shell: bash
        run: make package-versioned-deploy-artifacts
        if: startsWith(env.COMMIT_MESSAGE, 'Version change')

      # # Get release description (requires generated archives)
      # - shell: bash
      #   id: release_description
      #   run: |
      #     description=$(./scripts/get-release-description ${{ steps.versioning.outputs.auth_version }})
      #     description="${description//'%'/'%25'}"
      #     description="${description//$'\n'/'%0A'}"
      #     description="${description//$'\r'/'%0D'}"
      #     echo "::set-output name=description::$description"
      #   if: startsWith(env.COMMIT_MESSAGE, 'Version change')

      # Upload all the release archives to S3.
      - name: Upload dev to S3
        run: aws s3 sync deploy/dev s3://sn-client --acl public-read
      - name: Upload prod to S3
        run: aws s3 sync deploy/prod s3://sn-client --acl public-read

  # Automatic publish, triggered by a commit starting with "Version change".
  publish:
    name: Publish
    needs: [deploy]
    runs-on: ubuntu-latest
    # Is this a version change commit?
    if: startsWith(github.event.head_commit.message, 'Version change')
    steps:
      - uses: actions/checkout@v2

      - shell: bash
        id: versioning
        run: |
          client_version=$(grep "^version" < Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_client_version=$(cargo search sn_client --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "Current client version: $client_version"
          echo "Old client version: $old_client_version"
          echo "::set-output name=client_version::$client_version"
          echo "::set-output name=old_client_version::$old_client_version"

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Log into crates.io so we can publish
      - name: crates.io login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      # Only publish crates if their Cargo.toml version != their crates.io version.
      # Otherwise, cargo publish would fail on individual crates that haven't had their versions changed.
      - name: Publish sn_client
        if: steps.versioning.outputs.client_version != steps.versioning.outputs.old_client_version
        run: cargo publish

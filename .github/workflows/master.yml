name: Master

on:
  push:
    branches:
      - master
      - fleming

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Build prod libraries.
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=safe_authenticator/Cargo.toml
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=safe_app/Cargo.toml
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-prod
          path: artifacts

      # Build dev libraries.
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_authenticator/Cargo.toml
            --features=mock-network
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_app/Cargo.toml
            --features=mock-network
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-dev
          path: artifacts

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
    steps:
      # Checkout and get all the artifacts built in the previous jobs.
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-script
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-pc-windows-gnu-prod
          path: artifacts/prod/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-pc-windows-gnu-dev
          path: artifacts/dev/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-unknown-linux-gnu-prod
          path: artifacts/prod/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-unknown-linux-gnu-dev
          path: artifacts/dev/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-darwin-prod
          path: artifacts/prod/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-darwin-dev
          path: artifacts/dev/x86_64-apple-darwin/release

      # Get information for the release.
      - shell: bash
        id: versioning
        run: |
          core_version=$(grep "^version" < safe_core/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          auth_version=$(grep "^version" < safe_authenticator/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          app_version=$(grep "^version" < safe_app/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=core_version::$core_version"
          echo "::set-output name=auth_version::$auth_version"
          echo "::set-output name=app_version::$app_version"

      # Create `deploy` directory and put the artifacts into tar/zip archives for deployment with the release.
      - shell: bash
        run: make package-commit_hash-deploy-artifacts
        if: "!startsWith(env.COMMIT_MESSAGE, 'Version change')"
      - shell: bash
        run: make package-versioned-deploy-artifacts
        if: startsWith(env.COMMIT_MESSAGE, 'Version change')
      # Get release description (requires generated archives)
      - shell: bash
        id: release_description
        run: |
          description=$(./scripts/get-release-description ${{ steps.versioning.outputs.auth_version }})
          description="${description//'%'/'%25'}"
          description="${description//$'\n'/'%0A'}"
          description="${description//$'\r'/'%0D'}"
          echo "::set-output name=description::$description"
        if: startsWith(env.COMMIT_MESSAGE, 'Version change')

      # Upload all the release archives to S3.
      - name: Upload dev to S3
        run: aws s3 sync deploy/dev s3://safe-client-libs --acl public-read
      - name: Upload prod to S3
        run: aws s3 sync deploy/prod s3://safe-client-libs --acl public-read

      # Create the release and attach safe_client_libs archives as assets.
      - uses: csexton/create-release@add-body
        id: create_release
        with:
          tag_name: safe_core-${{ steps.versioning.outputs.core_version }}-safe_auth-${{ steps.versioning.outputs.auth_version }}-safe_app-${{ steps.versioning.outputs.app_version }}
          release_name: safe_client_libs
          draft: false
          prerelease: false
          body: ${{ steps.release_description.outputs.description }}
        if: startsWith(env.COMMIT_MESSAGE, 'Version change')

  # Automatic publish, triggered by a commit starting with "Version change".
  publish:
    name: Publish
    needs: deploy
    runs-on: ubuntu-latest
    # Is this a version change commit?
    if: startsWith(github.event.head_commit.message, 'Version change')
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        id: versioning
        run: |
          core_version=$(grep "^version" < safe_core/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          auth_version=$(grep "^version" < safe_authenticator/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          app_version=$(grep "^version" < safe_app/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_core_version=$(cargo search safe_core --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_auth_version=$(cargo search safe_authenticator --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_app_version=$(cargo search safe_app --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "Current core version: $core_version"
          echo "Current auth version: $auth_version"
          echo "Current app version: $app_version"
          echo "Old core version: $old_core_version"
          echo "Old auth version: $old_auth_version"
          echo "Old app version: $old_app_version"
          echo "::set-output name=core_version::$core_version"
          echo "::set-output name=auth_version::$auth_version"
          echo "::set-output name=app_version::$app_version"
          echo "::set-output name=old_core_version::$old_core_version"
          echo "::set-output name=old_auth_version::$old_auth_version"
          echo "::set-output name=old_app_version::$old_app_version"
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}

      # Only publish crates if their Cargo.toml version != their crates.io version.
      # Otherwise, cargo publish would fail on individual crates that haven't had their versions changed.
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_core/Cargo.toml
        if: steps.versioning.outputs.core_version != steps.versioning.outputs.old_core_version
      # Sleep between publishes, crates.io needs some time after publishing a new version before it reports its existence.
      - shell: bash
        name: Sleep
        run: sleep 120
        if: steps.versioning.outputs.core_version != steps.versioning.outputs.old_core_version
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_authenticator/Cargo.toml
        if: steps.versioning.outputs.auth_version != steps.versioning.outputs.old_auth_version
      # Sleep between publishes, crates.io needs some time after publishing a new version before it reports its existence.
      - shell: bash
        name: Sleep
        run: sleep 120
        if: steps.versioning.outputs.auth_version != steps.versioning.outputs.old_auth_version
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_app/Cargo.toml
        if: steps.versioning.outputs.app_version != steps.versioning.outputs.old_app_version


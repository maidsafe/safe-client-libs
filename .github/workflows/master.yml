name: Master

on:
  push:
    branches:
      - master

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: macOS-latest
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=safe_authenticator/Cargo.toml
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=safe_app/Cargo.toml
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-prod
          path: artifacts
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_authenticator/Cargo.toml
            --features=mock-network
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_app/Cargo.toml
            --features=mock-network
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-dev
          path: artifacts

  build-ios:
    runs-on: macOS-latest
    strategy:
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_authenticator/Cargo.toml
            --target=${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_app/Cargo.toml
            --target=${{ matrix.target }}
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/${{ matrix.target }}/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-prod
          path: artifacts
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_authenticator/Cargo.toml
            --features=mock-network --target=${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=safe_app/Cargo.toml
            --features=mock-network --target=${{ matrix.target }}
      - shell: bash
        run: |
          [[ -d "artifacts" ]] && rm -rf artifacts
          mkdir artifacts
          find "target/${{ matrix.target }}/release" -maxdepth 1 -type f -exec cp '{}' artifacts \;
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-dev
          path: artifacts

  # Use a single job for each type to build all targets.
  build-ios-universal:
    name: Build iOS Universal
    runs-on: macos-latest
    needs: build-ios
    strategy:
      matrix:
        type: [prod, dev]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-ios-${{ matrix.type }}
          path: artifacts/${{ matrix.type }}/x86_64-apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-aarch64-apple-ios-${{ matrix.type }}
          path: artifacts/${{ matrix.type }}/aarch64-apple-ios/release
      - shell: bash
        run: make universal-ios-lib-${{ matrix.type }}
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-apple-ios-${{ matrix.type }}
          path: artifacts/${{ matrix.type }}/universal

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [armv7-linux-androideabi, x86_64-linux-android]
        type: [prod, dev]
    env:
      SAFE_CLIENT_LIBS_CONTAINER_TARGET: ${{ matrix.target }}
      SAFE_CLIENT_LIBS_CONTAINER_TYPE: ${{ matrix.type }}
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        run: make build-android
      - uses: actions/upload-artifact@master
        with:
          name: safe_client_libs-${{ matrix.target }}-${{ matrix.type }}
          path: artifacts

  deploy:
    runs-on: ubuntu-latest
    needs: [build, build-android, build-ios, build-ios-universal]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Checkout and get all the artifacts built in the previous jobs.
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-script
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-pc-windows-gnu-prod
          path: artifacts/prod/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-pc-windows-gnu-dev
          path: artifacts/dev/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-unknown-linux-gnu-prod
          path: artifacts/prod/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-unknown-linux-gnu-dev
          path: artifacts/dev/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-armv7-linux-androideabi-prod
          path: artifacts/prod/armv7-linux-androideabi/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-armv7-linux-androideabi-dev
          path: artifacts/dev/armv7-linux-androideabi/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-linux-android-prod
          path: artifacts/prod/x86_64-linux-android/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-linux-android-dev
          path: artifacts/dev/x86_64-linux-android/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-darwin-prod
          path: artifacts/prod/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-darwin-dev
          path: artifacts/dev/x86_64-apple-darwin/release
      # iOS
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-aarch64-apple-ios-prod
          path: artifacts/prod/aarch64-apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-aarch64-apple-ios-dev
          path: artifacts/dev/aarch64-apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-ios-prod
          path: artifacts/prod/x86_64-apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-x86_64-apple-ios-dev
          path: artifacts/dev/x86_64-apple-ios/release
      # Universal iOS
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-apple-ios-prod
          path: artifacts/prod/apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe_client_libs-apple-ios-dev
          path: artifacts/dev/apple-ios/release

      # Get information for the release.
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - shell: bash
        id: versioning
        run: |
          core_version=$(grep "^version" < safe_core/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          auth_version=$(grep "^version" < safe_authenticator/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          app_version=$(grep "^version" < safe_app/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=core_version::$core_version"
          echo "::set-output name=auth_version::$auth_version"
          echo "::set-output name=app_version::$app_version"

      # Create `deploy` directory and put the artifacts into tar/zip archives for deployment with the release.
      - shell: bash
        run: make package-commit_hash-deploy-artifacts
        if: "!startsWith(steps.commit_message.outputs.commit_message, 'Version change')"
      - shell: bash
        run: make package-versioned-deploy-artifacts
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      # Get release description (requires generated archives)
      - shell: bash
        id: release_description
        run: |
          description=$(./scripts/get-release-description ${{ steps.versioning.outputs.app_version }} ${{ steps.versioning.outputs.auth_version }})
          description="${description//'%'/'%25'}"
          description="${description//$'\n'/'%0A'}"
          description="${description//$'\r'/'%0D'}"
          echo "::set-output name=description::$description"
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

      # Upload all the release archives to S3.
      - uses: actions/aws/cli@master
        with:
          args: s3 sync deploy/dev s3://safe-client-libs --acl public-read
      - uses: actions/aws/cli@master
        with:
          args: s3 sync deploy/prod s3://safe-client-libs --acl public-read

      # Create the release and attach safe_client_libs archives as assets.
      - uses: csexton/create-release@add-body
        id: create_release
        with:
          tag_name: safe_core-${{ steps.versioning.outputs.core_version }}-safe_auth-${{ steps.versioning.outputs.auth_version }}-safe_app-${{ steps.versioning.outputs.app_version }}
          release_name: safe_client_libs
          draft: false
          prerelease: false
          body: ${{ steps.release_description.outputs.description }}
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

      # Upload safe_app assets
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-unknown-linux-gnu.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-pc-windows-gnu.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-pc-windows-gnu.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-apple-darwin.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-linux-android.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-linux-android.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-armv7-linux-androideabi.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-armv7-linux-androideabi.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-aarch64-apple-ios.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-aarch64-apple-ios.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-apple-ios.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-x86_64-apple-ios.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_app-${{ steps.versioning.outputs.app_version }}-apple-ios.tar.gz
          asset_name: safe_app-${{ steps.versioning.outputs.app_version }}-apple-ios.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

      # Upload safe_auth assets
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-unknown-linux-gnu.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-pc-windows-gnu.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-pc-windows-gnu.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-apple-darwin.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-linux-android.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-linux-android.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-armv7-linux-androideabi.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-armv7-linux-androideabi.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-aarch64-apple-ios.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-aarch64-apple-ios.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-apple-ios.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-x86_64-apple-ios.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe_authenticator-${{ steps.versioning.outputs.auth_version }}-apple-ios.tar.gz
          asset_name: safe_authenticator-${{ steps.versioning.outputs.auth_version }}-apple-ios.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

  publish:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_core/Cargo.toml --dry-run
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_authenticator/Cargo.toml --dry-run
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe_app/Cargo.toml --dry-run
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
